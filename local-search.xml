<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从设计循环不变量浅谈快速排序</title>
    <link href="/2020/07/24/%E4%BB%8E%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E9%87%8F%E6%B5%85%E8%B0%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/07/24/%E4%BB%8E%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E9%87%8F%E6%B5%85%E8%B0%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>&emsp;&emsp;本人最近准备面试，在刷leetcode过程中遇到了类似于荷兰国旗的问题，于是特意回看了一下快速排序算法，也加深了对其的理解。作为一种feedback的方式，写一篇blog谈一谈对快排的认识。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>概述</li><li>基本算法</li><li>算法改进</li><li>例题</li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>&emsp;&emsp;快速排序是一种基于<a href="https://baike.baidu.com/item/分治法/2407337?fr=aladdin" target="_blank" rel="noopener">分治</a>思想的排序算法。它之所以流行的原因有二：一是<a href="https://baike.baidu.com/item/原地排序/5380040?fr=aladdin" target="_blank" rel="noopener">原地排序</a>，且长度为<em>N</em>的数组排序所需时间与<em>NlgN<em>成正比；二是其内循环比多数排序算法都小。之所以仅有快速排序被称为“快速”，是因为多数排序算法的基本操作次数执行次数的多项式最高次项为</em>X✖️nlog2n</em>(<em>X</em>为系数)，快速排序的<em>X</em>最小。这使得快速排序在同级别算法中最好，因此称为快速排序。另外，快速排序的平均时间复杂度为O(nlog2n)，空间复杂度O(log2n)。</p><h1 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h1><p>&emsp;&emsp;想要理解快速排序，重中之重在于理解切分(<em>paititon</em>)过程。而要理解切分过程，学会使用<a href="https://baike.baidu.com/item/循环不变量/8353186#4" target="_blank" rel="noopener">循环不变量</a>设计扫描指针是绕不开的关卡。文章后面会谈到此概念在快速排序中的应用。<br>&emsp;&emsp;先将传入的数组划分为两个子数组，将两部分独立排序，之后递归调用处理整个数组。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nums[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;        <span class="hljs-keyword">if</span>(left &lt;= right)                  <span class="hljs-comment">//递归结束条件</span>            <span class="hljs-keyword">return</span>;        <span class="hljs-comment">//切分，返回切分元素存放位置</span>        <span class="hljs-keyword">int</span> i = partition(nums, left, right);        <span class="hljs-comment">//递归调用排序左半部分[left...i-1]</span>        quickSort(nums, left, i - <span class="hljs-number">1</span>);          <span class="hljs-comment">//递归调用排序右半部分[i+1...right]    </span>        quickSort(nums, i + <span class="hljs-number">1</span>, right);          &#125;</code></pre><p>&emsp;&emsp;接下来到了方法的关键——切分。该过程数组满足下面三个条件：</p><ul><li><p>对于某个<em>i</em>，nums[<em>i</em>]已经排序完毕</p></li><li><p>左半部分[left…i-1]所有元素均不大于nums[<em>i</em>]</p></li><li><p>右半部分[i+1…right]所有元素均不小于nums[<em>i</em>]<br>&emsp;&emsp;过程如下：一般选取nums[<em>left</em>]作为切分元素(或称枢轴),即它是那个chosen one！之后，从数组左端开始扫描直到遇见大于它的元素，再从数组右端开始扫描直到遇见小于它的元素。这两个元素显然并未排序完毕，所以将其两个交换。如此循环，直到左右扫描指针相遇彼此，则此时我们会发现左半部分[left…i-1]所有元素均不大于nums[<em>i</em>]且右半部分[i+1…right]所有元素均不小于nums[<em>i</em>]。即，此时该相遇位置就是切分元素nums[<em>left</em>]的最终位置。</p><p>&emsp;&emsp;简易切分示意图如下：<br><img src="https://cdn.jsdelivr.net/gh/zhengguanyu/PhotoRepos@v1.0/img/quickSort.jpg" srcset="/img/loading.gif" alt="切分示意图(使用Goodnotes+ipad+pencil)"></p><p>&emsp;&emsp;切分(<em>paititon</em>)算法实现过程如下：</p></li></ul><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nums[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;        <span class="hljs-keyword">int</span> temp = nums[left];                  <span class="hljs-comment">//切分元素(或称枢轴),一般选取输入数组左端值</span>        <span class="hljs-keyword">int</span> lt = left, rt = right + <span class="hljs-number">1</span>;          <span class="hljs-comment">//左右扫描指针，此处指针的设计会影响后面"检查大小"与"扫描"这两操作的先后顺序</span>                                                <span class="hljs-comment">//注意：[left...lt) , [rt...right]划分的两数组初始为空</span>                                                <span class="hljs-comment">//     许多常见排序算法的扫描指针的设计都依据循环不变量这一概念</span>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">while</span>(nums[++lt] &gt; temp &amp;&amp; lt &lt; right)   <span class="hljs-comment">//先扫描后检查大小，向左扫描直到遇见大于temp的值，break</span>                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">while</span>(nums[--rt] &lt; temp &amp;&amp; rt &gt; left)    <span class="hljs-comment">//先扫描后检查大小，向右扫描直到遇见小于temp的值，break</span>                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">if</span>(lt &gt;= rt)                             <span class="hljs-comment">//当左右扫描指针相遇标志着扫描结束，切分元素位置已找出</span>                <span class="hljs-keyword">break</span>;            swap(nums[lt], nums[rt]);         <span class="hljs-comment">//交换元素</span>        &#125;        nums[lt] = temp;                             <span class="hljs-comment">//将切分元素放置在左右指针相遇位置，返回位置索引</span>        <span class="hljs-keyword">return</span> lt;    &#125;</code></pre><p>&emsp;&emsp;其中，要注意左右扫描指针的设计，这里涉及到<a href="https://baike.baidu.com/item/循环不变量/8353186#4" target="_blank" rel="noopener">循环不变量</a>的概念，这个概念<strong>尤其</strong>会应用在后续算法改进中的指针设计。事实上，许多常见的排序算法都要用到循环不变量，平时要多总结，便于深入理解排序算法过程。<br>&emsp;&emsp;为了加深对循环不变量的理解，在给出另一种扫描指针的设计。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSortSecond</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nums[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123; <span class="hljs-comment">//从左向右，由小到大排序</span>        <span class="hljs-keyword">int</span> temp;                                <span class="hljs-comment">//枢轴</span>        <span class="hljs-keyword">int</span> i = left, j = right;                 <span class="hljs-comment">//左指针i，右指针j  [left...i) , (j...right]两数组起始为空</span>                                                 <span class="hljs-comment">//注意区间开闭情况，这会使后续操作顺序变为先"检查大小"后"扫描"</span>        <span class="hljs-keyword">if</span>(i &lt; j)&#123;                               <span class="hljs-comment">//递归终止条件</span>            temp = nums[left];                   <span class="hljs-comment">//枢轴选取数组的左边界</span>            <span class="hljs-keyword">while</span>(i &lt; j)&#123;                <span class="hljs-keyword">while</span>(j &gt; i &amp;&amp; nums[j] &gt;= temp)  <span class="hljs-comment">//j向左扫描，遇到比temp值大的值就继续向左扫描</span>                    j--;                                         <span class="hljs-keyword">if</span>(i &lt; j)                        <span class="hljs-comment">//当向左扫描遇到的值小于temp时，将该值赋值到左侧索引i位置</span>                    nums[i++] = nums[j];         <span class="hljs-comment">//并且i前进到下一个索引位置，等待扫描开始</span>                <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; nums[i] &lt;=temp)   <span class="hljs-comment">//i向右扫描，遇到比temp值小的值就继续向右扫描</span>                    i++;                <span class="hljs-keyword">if</span>(i &lt; j)                        <span class="hljs-comment">//当向左扫描遇到的值大于temp时，将该值复制到右侧索引j位置</span>                    nums[j--] = nums[i];         <span class="hljs-comment">//并且j前进到下一个索引位置，等待扫描开始</span>            &#125;            nums[i] = temp;                      <span class="hljs-comment">//i，j最终相遇位置即为枢轴存放位置</span>            <span class="hljs-comment">//下一趟排序开始</span>            quickSort(nums, left, i - <span class="hljs-number">1</span>);  <span class="hljs-comment">//左</span>            quickSort(nums, i + <span class="hljs-number">1</span>, right);  <span class="hljs-comment">//右</span>        &#125;    &#125;</code></pre><p>&emsp;&emsp;此时，区间变为[left…i)和(j…right]，切分过程变为先检查大小后扫描。</p><h1 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h1><p>&emsp;&emsp;如果排序代码多次执行或者用于大型数组，那么上面的基本算法可能不再适用。改进方法有多种，具体理论可以去阅读<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">算法(第四版)</a>，经典中的经典！接下来介绍一种改进策略，也是由<strong>荷兰国旗问题</strong>引出的三路快排算法。<br>&emsp;&emsp;思路如下：将数组切分成三部分，即分别小于、等于和大于切分元素的子数组(对应荷兰国旗的三种颜色)。设计出三个指针，即<em>lt</em>，<em>rt</em>，<em>mt</em>。并且一般将数组左端元素作为切分元素<em>temp</em>。而后，从左到右扫描数组，使得</p><blockquote><p>[left…lt) &lt; temp<br>(gt…right] &gt; temp<br>[lt…mt) == temp<br>[mt…gt]等待排序</p></blockquote><p><strong>说明</strong>：循环不变量设计核心：代码执行过程中始终保持区间全覆盖且其中无重复。(注：可以自己画一个数轴实操一下)<br>&emsp;&emsp;针对这一核心，解释上面的设计思路：</p><ul><li>lt为小于temp和等于temp的分界点。为了不重合，一个设计成开区间，另一个就必须是闭区间。即，[left…lt) &lt; temp和[lt…mt) == temp</li><li>mt为扫描指针，一般设计成开区间。即，[lt…mt) == temp<br>准确来说[left…mt)中的元素代表已遍历。</li><li>gt为等待排序区间和大于temp区间分界点。同样为了不重合，一个设计成开区间，另一个就必须是闭区间。即，[mt…gt]等待排序和(gt…right] &gt; temp。</li></ul><p>&emsp;&emsp;另外注意，循环不变量设计思路不唯一，掌握核心即可随意设计。<br>&emsp;&emsp;接下来，为了将思路落实，我们就要考虑一个问题，<strong>如何初始化变量使得以上思路成立</strong>？因为这关系到后续算法的两大问题：</p><ol><li>扫描过程中，“加减”和“交换”这两个操作的先后顺序</li><li>递归何时结束</li></ol><p>&emsp;&emsp;为落实这三个问题，我们要说明一下切分过程。当指针mt扫描到某处时，遇到的情况无非三种：大于temp，小于temp，等于temp。所以针对这三种情况，我们有三步处理：</p><ul><li>nums[mt] == temp&emsp;<strong>加减</strong>：mt自增1；</li><li>nums[mt] &gt; temp&emsp;<strong>交换</strong>：nums[mt]与nums[rt]交换；<strong>加减</strong>：rt自减1；</li><li>nums[mt] &lt; temp&emsp;<strong>交换</strong>：nums[mt]与nums[lt]交换；<strong>加减</strong>：lt自增1，mt自增1；</li></ul><p>&emsp;&emsp;其实我们已经注意到“加减”和“交换”两个操作的顺序要根据指针变量的初始化而决定。至于递归何时结束？如果你理解了基本算法思路和循环不变量设计思路，不难发现当指针mt与指针rt相遇时，遍历结束。附上一个三路快排的切分示意图：<br><img src="https://cdn.jsdelivr.net/gh/zhengguanyu/PhotoRepos@v1.0/img/quickThiedSort.jpg" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><p>&emsp;&emsp;现在，让我们回到如何初始化指针变量的问题上来。在基本算法部分我们已经注意到，初始数组一定为空。也就是说，要设计lt，rt指针使得三部分数组在一开始为空。而后，“加减”和“交换”两步操作就看你的初始值如何定义了。以下是算法过程：(<strong>注意：此过程不唯一，要根据你设计的循环不变量而定</strong>)</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickThirdSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;        <span class="hljs-keyword">int</span> temp = arr[left];        <span class="hljs-keyword">int</span> lt = left, rt = right, mt = left + <span class="hljs-number">1</span>;       <span class="hljs-comment">//[left...lt)&lt;temp, [lt...mt]==temp, (rt...right]&gt;temp</span>        <span class="hljs-keyword">if</span>(left &lt; right) &#123;                              <span class="hljs-comment">//判定合法性</span>            <span class="hljs-keyword">while</span>(mt &lt;= rt)&#123;                            <span class="hljs-comment">//递归终止条件</span>                <span class="hljs-keyword">if</span>(arr[mt] == temp)                                     mt++;                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mt] &gt; temp)                    swap(arr[mt], arr[rt--]);    <span class="hljs-comment">//先交换再加减</span>                <span class="hljs-keyword">else</span>      <span class="hljs-comment">//arr[mt] &lt; temp</span>                    swap(arr[mt++],arr[lt++]);   <span class="hljs-comment">//先交换再加减</span>            &#125;            <span class="hljs-comment">//现在arr[left...lt) &lt; temp = arr[lt...rt] &lt; arr(rt...right]</span>            <span class="hljs-comment">//递归开始</span>            quickThirdSort(arr, left, lt - <span class="hljs-number">1</span>);            quickThirdSort(arr, rt + <span class="hljs-number">1</span>, right);        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">return</span>;        &#125;    &#125;</code></pre><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>&emsp;&emsp;<a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">leetcode#75.颜色分类</a><br>&emsp;&emsp;题目描述：给定一个包含0、1和2，一共 n 个元素的数组，对它们进行原地排序，使得相同值元素相邻，并按照0、1、2顺序排列。<br>&emsp;&emsp;实例：</p><blockquote><p>输入: [2,0,2,1,1,0]<br>输出: [0,0,1,1,2,2]</p></blockquote><p>&emsp;&emsp;思路：</p><ul><li>确定数组元素仅包含0、1、2三种值，由此可以采用三路快排方法求解问题；</li><li>取1作为切分元素，并设置zero，two两个边界指针，i为扫描指针。此处初始值的设计直接影响到循环边界(i &lt;= two或i == two)以及“加减”和”交换“的操作顺序。其中一种循环自变量定义会在代码中给出。</li><li>在循环过程中扫描到某处，简述判断过程：<blockquote><p>若等于1，非常简单，自增i就好；<br>若等于2，显然它属于“2”数组，这时要把它与指针two前(two–)到元素交换，让它归到“2”数组去。同时，我们也要自减two(注意：“加减”和”交换“的操作顺序由初始化变量决定！)这时我们会疑惑交换过来的数不一定为1呀！别着急，一步一步来。<br>现在对交换过来的元素进行判断。</p><blockquote><p>若为1，前面已经告诉你啦！<br>若为0，稍微有点复杂。将zero前(zero++)的元素和该值交换，当然，zero自增1将这个元素收入到“0”数组。此外，我们发现zero前的元素本来就是1(因为zero是“0”数组和“1”数组的分界点)，所以交换过来的元素理应是“1”数组的值，所以i自增。注意：这一步需要自增两个指针，而且顺序还是由循环自变量设计决定！</p></blockquote></blockquote></li><li>当i指针与two指针相遇时，循环结束。只需遍历一遍。无需递归</li></ul><p>&emsp;&emsp;附上自制过程图：<br><img src="https://img-blog.csdnimg.cn/20200216193915358.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDgwNzcxNA==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><p>&emsp;&emsp;算法：</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sortColors</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;        <span class="hljs-comment">//时间复杂度O(n)</span>        <span class="hljs-comment">//空间复杂度(1)</span>        <span class="hljs-comment">//循环自变量定义：</span>        <span class="hljs-comment">//[0...zero] = 0</span>        <span class="hljs-comment">//[zero...i) = 1</span>        <span class="hljs-comment">//[i..two)待排序</span>        <span class="hljs-comment">//[two...n-1] = 2</span>        <span class="hljs-keyword">int</span> zero = <span class="hljs-number">-1</span>;                            <span class="hljs-comment">//nums[0...zero] == 0 初始数组为空</span>        <span class="hljs-keyword">int</span> two = nums.size();                    <span class="hljs-comment">//nums[two..n-1] == 2 初始数组为空</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; two; ) &#123;            <span class="hljs-keyword">if</span>(nums[i] == <span class="hljs-number">1</span>)&#123;                i++;            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[i] == <span class="hljs-number">2</span>)&#123;                swap(nums[i], nums[--two]);            &#125;            <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//nums[i] == 0</span>                assert(nums[i] == <span class="hljs-number">0</span>);                swap(nums[++zero], nums[i++]);                <span class="hljs-comment">// swap(nums[++zero], nums[i++]);</span>            &#125;        &#125;&#125;</code></pre><p>&emsp;&emsp;对本题有什么疑惑，可以去英文版leetcode的discuss区看看大佬们的解答,可能会启发你。<br>&emsp;&emsp;欢迎同志们指正和讨论，共同进步！</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
